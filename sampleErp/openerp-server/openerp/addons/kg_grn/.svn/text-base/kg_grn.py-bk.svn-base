from datetime import datetime
from dateutil.relativedelta import relativedelta
import time
from operator import itemgetter
from itertools import groupby

from openerp.osv import fields, osv
from openerp.tools.translate import _
from openerp import netsvc
from openerp import tools
from openerp.tools import float_compare, DEFAULT_SERVER_DATETIME_FORMAT
import openerp.addons.decimal_precision as dp
import logging



class kg_stock_picking(osv.osv):
	
	_inherit = "stock.picking"
	_name = "stock.picking"
	
	_columns = {
	
	'dc_no': fields.char('DC.NO', size=128),
	'dc_date':fields.date('DC.Date'),
	'inward_type': fields.many2one('kg.inwardmaster', 'Inward Type'),
	'po_id':fields.many2one('purchase.order', 'Pending POS'),
	'state': fields.selection([
            ('draft', 'Draft'),
            ('cancel', 'Cancelled'),
            ('auto', 'Waiting'),
            ('confirmed', 'Confirmed'),
            ('assigned', 'Available'),
            ('done', 'Done'),
            ('qawaiting', 'QA Waiting'),
            ], 'Statusfff', readonly=True, select=True, track_visibility='onchange'),
	}
	
	def action_assign_wkf(self, cr, uid, ids, context=None):
		print "mymymymyworoworoworowoprowpro---------------- stock.picking"
		""" Changes picking state to assigned.
		@return: True
		"""
		self.write(cr, uid, ids, {'state': 'assigned'})
		return True
		
	
	def test_finished(self, cr, uid, ids):
		print "mymymymyymtesteteteetetsetetezteteet ---------------- stock.picking"
		""" Tests whether the move is in done or cancel state or not.
		@return: True or False
		"""
		move_ids = self.pool.get('stock.move').search(cr, uid, [('picking_id', 'in', ids)])
		for move in self.pool.get('stock.move').browse(cr, uid, move_ids):
			if move.state not in ('done', 'cancel'):

				if move.product_qty != 0.0:
					return False
				else:
					move.write({'state': 'done'})
		return True
	
	def action_process(self, cr, uid, ids, context=None):
		
		print "MMMMMMMMMmYMmmmmmmmmmmmmmYMYYYYY ---------------- stock.picking"
		
		if context is None:
			context = {}
		"""Open the partial picking wizard"""
		context.update({
			'active_model': self._name,
			'active_ids': ids,
			'active_id': len(ids) and ids[0] or False
		})
		return {
			'view_type': 'form',
			'view_mode': 'form',
			'res_model': 'stock.partial.picking',
			'type': 'ir.actions.act_window',
			'target': 'new',
			'context': context,
			'nodestroy': True,
		}
	
	def action_confirm(self, cr, uid, ids, context=None):
		print "mymymymyCONCONCONOCOCONCOCONCONCONNC ---------------- stock.picking"
		""" Confirms picking.
		@return: True
		"""
		print "idsidsidsidisds", ids
		pickings = self.browse(cr, uid, ids, context=context)
		print "pickings --------------------------", pickings
		self.write(cr, uid, ids, {'state': 'confirmed'})
		todo = []
		for picking in pickings:
			for r in picking.move_lines:
				if r.state == 'draft':
					todo.append(r.id)
		todo = self.action_explode(cr, uid, todo, context)
		if len(todo):
			self.pool.get('stock.move').action_confirm(cr, uid, todo, context=context)
		return True
		
	
kg_stock_picking()


class kg_stock_picking_in(osv.osv):
	
	__name = "stock.picking"
	_inherit="stock.picking.in"
	
	
	_columns = {
	
	'dc_no': fields.char('DC.NO', size=128),
	'dc_date':fields.date('DC.Date'),
	'inward_type': fields.many2one('kg.inwardmaster', 'Inward Type'),
	'po_id':fields.many2one('purchase.order', 'Pending POS', required=True, domain="[('state','=','approved')]", 
		states={'done':[('readonly', True)], 'cancel':[('readonly',True)],'assigned':[('readonly',True)]}),
	'date': fields.date('GRN Date', select=True,readonly=True),
	'invoice_state': fields.selection([
			("invoiced", "Invoiced"),
			("2binvoiced", "To Be Invoiced")], "Invoice Control", select=True, required=True, track_visibility='onchange',
			states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',True)]}),
	'state': fields.selection([
            ('draft', 'Draft'),
            ('cancel', 'Cancelled'),
            ('auto', 'Waiting'),
            ('confirmed', 'Confirmed'),
            ('assigned', 'Waiting for Approval'),
            ('done', 'Done'),
            ('qawaiting', 'QA Waiting'),
            ], 'Statuscool', readonly=True, select=True, track_visibility='onchange'),
	'partner_id': fields.many2one('res.partner', 'Partner', states={'done':[('readonly', True)], 'cancel':[('readonly',True)],
		'assigned':[('readonly',True)]}),


   
   	
	}
	
	_defaults = {
	
	'date' : fields.date.context_today,
	'invoice_state' : '2binvoiced',
	
	}
	
	
	def action_assign_wkf(self, cr, uid, ids, context=None):
		print "mynymymymworoworoworowoprowpro ---------------- stock.picking.in"
		""" Changes picking state to assigned.
		@return: True
		"""
		self.write(cr, uid, ids, {'state': 'assigned'})
		return True
		
	def test_finished(self, cr, uid, ids):
		print "newnewnewnewnetesteteteetetsetetezteteet ---------------- stock.picking.in"
		""" Tests whether the move is in done or cancel state or not.
		@return: True or False
		"""
		move_ids = self.pool.get('stock.move').search(cr, uid, [('picking_id', 'in', ids)])
		for move in self.pool.get('stock.move').browse(cr, uid, move_ids):
			if move.state not in ('done', 'cancel'):

				if move.product_qty != 0.0:
					return False
				else:
					move.write({'state': 'done'})
		return True
	
	def action_process(self, cr, uid, ids, context=None):
		
		print "newnewenwenwenwMMMMMMMMMmYMmmmmmmmmmmmmmYMYYYYY ---------------- stock.picking.in"
		
		if context is None:
			context = {}
		"""Open the partial picking wizard"""
		context.update({
			'active_model': self._name,
			'active_ids': ids,
			'active_id': len(ids) and ids[0] or False
		})
		return {
			'view_type': 'form',
			'view_mode': 'form',
			'res_model': 'stock.partial.picking',
			'type': 'ir.actions.act_window',
			'target': 'new',
			'context': context,
			'nodestroy': True,
		}
		
	def action_confirm(self, cr, uid, ids, context=None):
		print "mymymymCONCONCONOCOCONCOCONCONCONNC ---------------- stock.picking.in"
		""" Confirms picking.
		@return: True
		"""
		pickings = self.browse(cr, uid, ids, context=context)
		self.write(cr, uid, ids, {'state': 'confirmed'})
		todo = []
		for picking in pickings:
			for r in picking.move_lines:
				if r.state == 'draft':
					todo.append(r.id)
		todo = self.action_explode(cr, uid, todo, context)
		if len(todo):
			self.pool.get('stock.move').action_confirm(cr, uid, todo, context=context)
		return True
	
		
	def draft_picking(self, cr, uid, ids,context=None):
		self.write(cr,uid,ids,{'state':'draft'})
		return True
	
	def _prepare_order_line_move(self, cr, uid, po_order, order_line, picking_id, context=None):
		#print "po_order ::::::::>>>>>>>>>>>>>>>>>>>>", po_order
		#print "order_line ::::::::::::<<<<<<<<<<<<<<<", order_line

		return {
			'name': order_line.product_id.name or '/',
			'product_id': order_line.product_id.id,
			'product_qty': order_line.product_qty,
			'po_qty' : order_line.product_qty,
			'product_uos_qty': order_line.product_qty,
			'product_uom': order_line.product_uom.id,
			'product_uos': order_line.product_uom.id,
			'location_id': po_order.partner_id.property_stock_supplier.id,
			'location_dest_id': po_order.location_id.id,
			'picking_id': picking_id,
			'partner_id': po_order.dest_address_id.id or po_order.partner_id.id,
			'move_dest_id': order_line.move_dest_id.id,
			'state': 'assigned',
			'type':'in',
			'purchase_line_id': order_line.id,
			'company_id': po_order.company_id.id,
			'price_unit': order_line.price_unit
		}


	def update_potogrn(self,cr,uid,ids,picking_id=False,context={}):
		po_id = False
		obj = self.browse(cr,uid,ids[0])
		po_obj=self.pool.get('purchase.order')
		picking_obj=self.pool.get('stock.picking')
		picking_po_id = picking_obj.browse(cr,uid,obj.po_id.id)
		po_order = obj.po_id
		self.pool.get('stock.picking').write(cr,uid,ids,
		{
		
		'name': self.pool.get('ir.sequence').get(cr, uid, 'stock.picking.in'),
		'origin': po_order.name + ((po_order.origin and (':' + po_order.origin)) or ''),
		'partner_id': po_order.dest_address_id.id or po_order.partner_id.id,
		'invoice_state': '2binvoiced',
		'type': 'in',
		'partner_id': po_order.dest_address_id.id or po_order.partner_id.id,
		'purchase_id': po_order.id,
		'company_id': po_order.company_id.id,
		'state' : 'assigned',
		'move_lines' : [],		
		
		})
		picking_id = obj.id
		print "stcok picking write compled+++++++++++++++++++++++++", picking_id
		todo_moves = []
		stock_move = self.pool.get('stock.move')
		wf_service = netsvc.LocalService("workflow")
		order_lines=po_order.order_line
		
		for order_line in order_lines:
				move = stock_move.create(cr, uid, self._prepare_order_line_move(cr, uid, po_order, order_line, picking_id, context=context))
				if order_line.move_dest_id:
					order_line.move_dest_id.write({'location_id': po_order.location_id.id})
				todo_moves.append(move)

		wf_service.trg_validate(uid, 'stock.picking', picking_id, 'button_confirm', cr)
		return [picking_id]
	
	
kg_stock_picking_in()


class kg_stock_move(osv.osv):
	
	_name = "stock.move"
	_inherit = "stock.move"
	
	_columns = {

	'po_qty': fields.float('PO Qty', states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',True)]}),
	'expiry_date': fields.date('Expiry Date', states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',False)]}),
	'product_qty': fields.float('GRN Qty', digits_compute=dp.get_precision('Product Unit of Measure'),
            required=True, states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',False)]}),
   'product_id': fields.many2one('product.product', 'Product', required=True, select=True, domain=[('type','<>','service')],
		states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',True)]}),
   'product_uom': fields.many2one('product.uom', 'Unit of Measure', required=True,
		states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',True)]}),
	'name': fields.char('Description', required=True, select=True,
		states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',True)]}),
   'location_dest_id': fields.many2one('stock.location', 'Destination Location', required=True,
		states={'done':[('readonly', True)], 'cancel':[('readonly',True)], 'assigned':[('readonly',True)]}, 
		select=True, help="Location where the system will stock the finished products."),
	
	'state': fields.selection([('draft', 'New'),
                                   ('cancel', 'Cancelled'),
                                   ('assigned', 'Waiting for Approval'),
                                   ('done', 'Done'),
                                   ], 'Status456', readonly=True, select=True),
        
	
	
	
	}
	
	def onchange_uos_quantity(self, cr, uid, ids, product_id, product_uos_qty,
						  product_uos, product_uom):
		""" On change of product quantity finds UoM and UoS quantities
		@param product_id: Product id
		@param product_uos_qty: Changed UoS Quantity of product
		@param product_uom: Unit of measure of product
		@param product_uos: Unit of sale of product
		@return: Dictionary of values
		"""
		result = {
				  'product_qty': 0.00
		  }
		warning = {}

		if (not product_id) or (product_uos_qty <=0.0):
			result['product_uos_qty'] = 0.0
			return {'value': result}

		product_obj = self.pool.get('product.product')
		uos_coeff = product_obj.read(cr, uid, product_id, ['uos_coeff'])
		"""
		# Warn if the quantity was decreased 
		for move in self.read(cr, uid, ids, ['product_uos_qty']):
			if product_uos_qty < move['product_uos_qty']:
				warning.update({
				   'title': _('Warning: No Back Order'),
				   'message': _("By changing the quantity here, you accept the "
								"new quantity as complete: OpenERP will not "
								"automatically generate a Back Order.") })
				break """

		if product_uos and product_uom and (product_uom != product_uos):
			result['product_qty'] = product_uos_qty / uos_coeff['uos_coeff']
		else:
			result['product_qty'] = product_uos_qty
		return {'value': result}
	
kg_stock_move()	


	

