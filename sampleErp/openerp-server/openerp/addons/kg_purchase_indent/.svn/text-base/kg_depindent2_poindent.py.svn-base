import math
import re
from openerp import tools
from openerp.osv import osv, fields
from openerp.tools.translate import _
import time
import kg_depindent
from itertools import groupby
import openerp.addons.decimal_precision as dp

class kg_depindent2_poindent(osv.osv):
	
	_name = "purchase.requisition"
	_inherit = "purchase.requisition"

	_columns = {
	
	'kg_depindent_lines':fields.many2many('kg.depindent.line','kg_depindent_pi_line' , 'pi_id', 'depindent_line_id', 'DepIndent Lines',
			domain="[('indent_id.state','=','approved'), '&', ('pending_qty','>','0'), '&', ('issue_pending_qty','>','0'), '&', ('line_state','!=', 'process')]", 
			readonly=True, states={'draft': [('readonly', False)]}),
			
		}

	def update_pil(self,cr,uid,ids,context=False):
		print "callled update_pil from KG"

		"""
		Purchase indent line should be created from dep indent while click on update to purchase indent button
		"""
		depindent_line_obj = self.pool.get('kg.depindent.line')
		pi_line_obj = self.pool.get('purchase.requisition.line')
		prod_obj = self.pool.get('product.product')
		user_obj = self.pool.get('res.users')
		line_ids = []			   
		res={}
		line_ids = []
		res['line_ids'] = []
		res['pi_flag'] = True
		obj =  self.browse(cr,uid,ids[0])
		user_rec = obj.user_id
		user = user_rec.id
		print "user --------------------------------------", user
		if obj.line_ids:
			for line in obj.line_ids:
				di_line = line.depindent_line_id
				di_line.write({'line_state' : 'noprocess'})			
			line_ids = map(lambda x:x.id,obj.line_ids)
			pi_line_obj.unlink(cr,uid,line_ids)
		if obj.kg_depindent_lines:
			depindent_line_ids = map(lambda x:x.id,obj.kg_depindent_lines)
			depindent_line_browse = depindent_line_obj.browse(cr,uid,depindent_line_ids)
			depindent_line_browse = sorted(depindent_line_browse, key=lambda k: k.product_id.id)
			groups = []
			for key, group in groupby(depindent_line_browse, lambda x: x.product_id.id):
				groups.append(map(lambda r:r,group))
				print "key ====", key , "Group ======", group, 'Groupsssssss ====', groups
			for key,group in enumerate(groups):
				print "*******************************"
				print "key ====>", key, "group ====>>", group
				qty = sum(map(lambda x:float(x.po_qty),group)) #TODO: qty
				depindent_line_ids = map(lambda x:x.id,group)
				if len(depindent_line_ids) > 1:
					flag = True
				else:
					flag = False
				print "group[0] ====================>>>", group[0]
				indent = group[0].indent_id
				print "indent =================>>>>", indent
				dep = indent.dep_name.id
				print "dep =================>>>>", dep
				prod_browse = group[0].product_id			
				uom = group[0].uom.id or False
				po_uom = group[0].po_uom.id or False
				depindent_id= group[0].id
				po_qty = group[0].po_qty
				pending_qty = group[0].pending_qty
				remark = group[0].note		
					
				vals = {
			
				'product_id':prod_browse.id,
				'product_uom_id':po_uom,
				'product_qty':qty,
				'pending_qty':qty,
				'dep_indent_qty':pending_qty,
				'depindent_line_id':depindent_id,
				'po_uom_qty': po_qty,
				'default_uom_id':uom,
				'group_flag': flag,
				'note':remark,
				'dep_id': dep,
				'user_id' : user,
				
				}
				print "vals :", vals
				
				depindent_line_obj.write(cr,uid,depindent_id,{'line_state' : 'process'})
				
				if ids:
					self.write(cr,uid,ids[0],{'line_ids':[(0,0,vals)]})
			"""	
			if ids:
				if obj.line_ids:
					line_ids = map(lambda x:x.id,obj.line_ids)
					for line_id in line_ids:
						self.write(cr,uid,ids,{'line_ids':[]})
						"""
		self.write(cr,uid,ids,res)			
		return True		
		
	def update_product_group(self,cr,uid,ids,line,context=None):		
		print "update_product_group called @@@@@@@@@@@@@@@@@@@@", line
		pi_rec = self.browse(cr, uid, ids[0])
		line_obj = self.pool.get('purchase.requisition.line')
		dep_line_obj = self.pool.get('kg.depindent.line')
		product_obj = self.pool.get('product.product')
		cr.execute(""" select depindent_line_id from kg_depindent_pi_line where pi_id = %s """ %(str(ids[0])))
		data = cr.dictfetchall()
		val = [d['depindent_line_id'] for d in data if 'depindent_line_id' in d] 
		print "val...............................",val
		product_id = line.product_id.id
		product_record = product_obj.browse(cr, uid, product_id)
		print "product_id....................", product_id
		list_line = dep_line_obj.search(cr,uid,[('id', 'in', val), ('product_id', '=', product_id)],context=context)
		print "list_line....................>>>>>", list_line
		depindent_line_id=line.depindent_line_id
		pi_qty = line.product_qty
		
		for i in list_line:
			print "IIIIIIIIIIIIIIIIIIIIIIII", i
			bro_record = dep_line_obj.browse(cr, uid,i)
			print "bro_record ;;;;;;;;;;;;;;;;;;;;;;;", bro_record
			orig_depindent_qty = bro_record.pending_qty
			po_uom_qty = bro_record.po_qty
			pi_used_qty = pi_qty
			print "pi_used_qty,,,,,,,,,,,,,,,,", pi_used_qty, 
			print "orig_depindent_qty ===============>>", orig_depindent_qty, 'po_uom_qty ==============>>>', po_uom_qty
			uom = bro_record.uom.id
			po_uom = bro_record.po_uom.id
			print "uom,,,,,,,,,,,,,,,,,,,,..................,,,,,,,,,,,", uom
			print "po_uom,,,,,,,,,,,,,,,,,,,,...........===============>>", po_uom
			if uom != po_uom:
				print "Ifff =====>>> po_uom_qty", po_uom_qty						
				if pi_used_qty <= po_uom_qty:
					print "IFFFFFFFFFFFFFFFFF Calling"
					pending_po_depindent_qty =  po_uom_qty - pi_used_qty
					pending_stock_depindent_qty = orig_depindent_qty - (pi_used_qty * product_record.po_uom_coeff)
					print "dep line id ::::::::::",bro_record
					print "po_qty ::::::::", pending_po_depindent_qty
					print "qty ::::::::", pending_stock_depindent_qty
					sql = """ update kg_depindent_line set po_qty=%s, pending_qty=%s where id = %s"""%(pending_po_depindent_qty,
						pending_stock_depindent_qty,bro_record.id)
					cr.execute(sql)
					#dep_line_obj.write(cr,uid, bro_record.id, {'line_state' : 'noprocess'})
					break
				else:
					remain_qty = pi_used_qty - po_uom_qty
					pi_qty = remain_qty
					print "remain_qty ()(()()))))))))))()()", remain_qty
					pending_po_depindent_qty =  0.0
					pending_stock_depindent_qty = 0.0
					print "pending_po_depindent_qty ::::::::", pending_po_depindent_qty
					print "pending_stock_depindent_qty ::::::::", pending_stock_depindent_qty
					sql = """ update kg_depindent_line set po_qty=%s, pending_qty=%s where id = %s"""%(pending_po_depindent_qty,
						pending_stock_depindent_qty,bro_record.id)
					cr.execute(sql)
					#dep_line_obj.write(cr,uid, bro_record.id, {'line_state' : 'noprocess'})
					if remain_qty < 0:
						break			
			
			else:
				print "else =====>>> po_uom_qty", po_uom_qty
				if pi_used_qty <= po_uom_qty:
					print "IFFFFFFFFFFFFFFFFF Calling"
					pending_po_depindent_qty =  po_uom_qty - pi_used_qty
					pending_stock_depindent_qty = po_uom_qty - pi_used_qty 
					print "dep line id ::::::::::",bro_record
					print "po_qty ::::::::", pending_po_depindent_qty
					print "qty ::::::::", pending_stock_depindent_qty
					sql = """ update kg_depindent_line set po_qty=%s, pending_qty=%s where id = %s"""%(pending_po_depindent_qty,
						pending_stock_depindent_qty,bro_record.id)
					cr.execute(sql)
					#dep_line_obj.write(cr,uid, bro_record.id, {'line_state' : 'noprocess'})
					break
				else:
					remain_qty = pi_used_qty - po_uom_qty
					pi_qty = remain_qty
					print "remain_qty ()(()()))))))))))()()", remain_qty
					pending_po_depindent_qty =  0.0
					pending_stock_depindent_qty = 0.0
					print "pending_po_depindent_qty ::::::::", pending_po_depindent_qty
					print "pending_stock_depindent_qty ::::::::", pending_stock_depindent_qty
					sql = """ update kg_depindent_line set po_qty=%s, pending_qty=%s where id = %s"""%(pending_po_depindent_qty,
						pending_stock_depindent_qty,bro_record.id)
					cr.execute(sql)
					#dep_line_obj.write(cr,uid, bro_record.id, {'line_state' : 'noprocess'})
					if remain_qty < 0:
						break		
		return True			
		
kg_depindent2_poindent()
