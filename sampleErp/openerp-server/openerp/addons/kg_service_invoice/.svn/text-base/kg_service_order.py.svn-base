import math
import re
from openerp import tools
from openerp.osv import osv, fields
from openerp.tools.translate import _
import time
from itertools import groupby
import openerp.addons.decimal_precision as dp
import netsvc
import pooler
import logging
logger = logging.getLogger('server')

class kg_service_order(osv.osv):

	_name = "kg.service.order"
	_description = "KG Service Order"
	_order = "date desc"

	
	def _amount_line_tax(self, cr, uid, line, context=None):
		val = 0.0
		new_amt_to_per = line.kg_discount or 0.0 / line.product_qty
		print "new_amt_to_per ---------------;;;;;;>>>>>", new_amt_to_per
		amt_to_per = (line.kg_discount / (line.product_qty * line.price_unit or 1.0 )) * 100
		print "amt_to_per -----------------------;;;;;;>>>>>", amt_to_per
		kg_discount_per = line.kg_discount_per
		tot_discount_per = amt_to_per + kg_discount_per
		for c in self.pool.get('account.tax').compute_all(cr, uid, line.taxes_id,
			line.price_unit * (1-(tot_discount_per or 0.0)/100.0), line.product_qty, line.product_id,
			 line.service_id.partner_id)['taxes']:
			print "c ----------------------******************", c
				 
			val += c.get('amount', 0.0)
		return val
	
	def _amount_all(self, cr, uid, ids, field_name, arg, context=None):
		res = {}
		cur_obj=self.pool.get('res.currency')
		for order in self.browse(cr, uid, ids, context=context):
			res[order.id] = {
				'amount_untaxed': 0.0,
				'amount_tax': 0.0,
				'amount_total': 0.0,
				'discount' : 0.0,
				'other_charge': 0.0,
			}
			val = val1 = val3 = 0.0
			cur = order.pricelist_id.currency_id
			po_charges=order.value1 + order.value2
			for line in order.service_order_line:
				tot_discount = line.kg_discount + line.kg_discount_per_value
				val1 += line.price_subtotal
				val += self._amount_line_tax(cr, uid, line, context=context)
				val3 += tot_discount
			print "po_charges :::", po_charges , "val ::::", val, "val1::::", val1, "val3:::::", val3
			res[order.id]['other_charge']=cur_obj.round(cr, uid, cur, po_charges)
			res[order.id]['amount_tax']=cur_obj.round(cr, uid, cur, val)
			res[order.id]['amount_untaxed']=cur_obj.round(cr, uid, cur, val1)
			res[order.id]['amount_total']=res[order.id]['amount_untaxed'] + res[order.id]['amount_tax'] + res[order.id]['other_charge']
			res[order.id]['discount']=cur_obj.round(cr, uid, cur, val3)
			#self.write(cr, uid,order.id, {'other_charge' : po_charges})
		print "res ^^^^^^^^^^^^^,", "amount_total====", res[order.id]['amount_total'], "^^^^^^^^^^^^^^", res
		return res
		
	def _get_order(self, cr, uid, ids, context=None):
		result = {}
		for line in self.pool.get('kg.service.order.line').browse(cr, uid, ids, context=context):
			result[line.service_id.id] = True
		return result.keys()
	
	
	_columns = {
		'name': fields.char('Service Order No', size=64,readonly=True, states={'draft': [('readonly', False)]}),
		'dep_name': fields.many2one('kg.depmaster','Dep.Name', translate=True, select=True),
		'date': fields.date('Date', required=True, readonly=True),
		'partner_id':fields.many2one('res.partner', 'Misc Supplier', required=True,readonly=True, 
					states={'draft':[('readonly',False)]}),
		'pricelist_id':fields.many2one('product.pricelist', 'Pricelist'),
		'partner_address':fields.char('Supplier Address', size=128, readonly=True, states={'draft':[('readonly',False)]}),
		'service_order_line': fields.one2many('kg.service.order.line', 'service_id', 'Order Lines', 
					readonly=True, states={'draft':[('readonly',False)]}),
		'active': fields.boolean('Active'),
		'user_id' : fields.many2one('res.users', 'User', readonly=False),
		'state': fields.selection([('draft', 'Draft'),('confirm','Waiting For Approval'),('approved','Approved'),('done','Done'),('cancel','Cancel')], 'Status', track_visibility='onchange', required=True),
		'delivery_type':fields.many2one('kg.deliverytype.master', 'Delivery Schedule', required=True, 
						readonly=True, states={'draft':[('readonly',False)]}),
		'delivery_mode': fields.selection([('direct','Direct'),('door','DOOR DELIVERY')], 'Mode of delivery', required=True, 
						readonly=True, states={'draft':[('readonly',False)]}),
		'payment_mode': fields.selection([('ap','Advance Paid'),('on_receipt', 'On receipt of Goods and acceptance')], 'Mode of Payment', 
					required=True, readonly=True, states={'draft':[('readonly',False)]}),
		'po_expenses_type1': fields.selection([('freight','Freight Charges'),('others','Others')], 'Expenses Type1', 
										readonly=True, states={'draft':[('readonly',False)]}),
		'po_expenses_type2': fields.selection([('freight','Freight Charges'),('others','Others')], 'Expenses Type2', 
								readonly=True, states={'draft':[('readonly',False)]}),
		'value1':fields.float('Value1', readonly=True, states={'draft':[('readonly',False)]}),
		'value2':fields.float('Value2', readonly=True, states={'draft':[('readonly',False)]}),
		'note': fields.text('Remarks'),
		'other_charge': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Other Charges(+)',
			 multi="sums", help="The amount without tax", track_visibility='always'),		
		
		'discount': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Total Discount(-)',
			store={
				'kg.service.order': (lambda self, cr, uid, ids, c={}: ids, ['service_order_line'], 10),
				'kg.service.order.line': (_get_order, ['price_unit', 'tax_id', 'kg_discount', 'product_qty'], 10),
			}, multi="sums", help="The amount without tax", track_visibility='always'),
		'amount_untaxed': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Untaxed Amount',
			store={
				'kg.service.order': (lambda self, cr, uid, ids, c={}: ids, ['service_order_line'], 10),
				'kg.service.order.line': (_get_order, ['price_unit', 'tax_id', 'kg_discount', 'product_qty'], 10),
			}, multi="sums", help="The amount without tax", track_visibility='always'),
		'amount_tax': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Taxes',
			store={
				'kg.service.order': (lambda self, cr, uid, ids, c={}: ids, ['service_order_line'], 10),
				'kg.service.order.line': (_get_order, ['price_unit', 'tax_id', 'kg_discount', 'product_qty'], 10),
			}, multi="sums", help="The tax amount"),
		'amount_total': fields.function(_amount_all, digits_compute= dp.get_precision('Account'), string='Total',
			store=True, multi="sums",help="The total amount"),
		'kg_serindent_lines':fields.many2many('kg.service.indent.line','kg_serindent_so_line' , 'so_id', 'serindent_line_id', 'ServiceIndent Lines',
			domain="[('service_id.state','=','done'), '&', ('pending_qty','>','0')]", 
			readonly=True, states={'draft': [('readonly', False)]}),
		'so_flag': fields.boolean('SO Flag'),
		'kg_seq_id':fields.many2one('ir.sequence','Document Type',domain=[('code','=','kg.service.order')],
			readonly=True, states={'draft': [('readonly', False)]}),
		'remark': fields.text('Remarks', readonly=True, states={'draft': [('readonly', False)]}),
		'so_bill': fields.boolean('SO Bill', readonly=True),

		
	}
	_sql_constraints = [('code_uniq','unique(name)', 'Service Order number must be unique!')]

	_defaults = {
		'state' : 'draft',
		'active' : 'True',
		'date' : fields.date.context_today,
		'user_id': lambda self, cr, uid, c: self.pool.get('res.users').browse(cr, uid, uid, c).id ,

	}
	
	
	def onchange_seq_id(self, cr, uid, ids, kg_seq_id,name):
		print "kgggggggggggggggggg --  onchange_seq_id called"		
		value = {'name':''}
		if kg_seq_id:
			next_seq_num = self.pool.get('ir.sequence').kg_get_id(cr, uid, kg_seq_id,'id',{'noupdate':False})
			print "next_seq_num:::::::::::", next_seq_num
			value = {'name': next_seq_num}
		return {'value': value}
	
	
	def onchange_partner_id(self, cr, uid, ids, partner_id):
		partner = self.pool.get('res.partner')
		if not partner_id:
			return {'value': {
				'fiscal_position': False,
				'payment_term_id': False,
				}}
		supplier_address = partner.address_get(cr, uid, [partner_id], ['default'])
		supplier = partner.browse(cr, uid, partner_id)
		street = supplier.street or ''
		city = supplier.city or ''
		address = street+ city or ''

		return {'value': {
			'pricelist_id': supplier.property_product_pricelist_purchase.id,
			'partner_address' : address,
			}}
			
	def button_dummy(self, cr, uid, ids, context=None):
		return True
	
	
	def draft_order(self, cr, uid, ids,context=None):
		"""
		Draft Order
		"""
		self.write(cr,uid,ids,{'state':'draft'})
		return True
		
	def confirm_order(self, cr, uid, ids,context=None):
		"""
		Service Order Confirm
		"""
		for t in self.browse(cr,uid,ids):
			if not t.service_order_line:
				raise osv.except_osv(
						_('Empty Service Order'),
						_('You can not confirm an empty Service Order'))
			print "t.dep_order_line,,,,,,,,,,,,,,,,,", t.service_order_line
			for line in t.service_order_line:
				print "line ==========================>>", line
				if line.product_qty==0:
					raise osv.except_osv(
					_('Error'),
					_('Service Order quantity can not be zero'))
				if line.product_qty > line.soindent_qty:
					raise osv.except_osv(
					_('If Service Order From Service Indent'),
					_('Service Order Qty can not greater than Service Indent Qty For Product --> %s'%(line.product_id.name)))
					
			self.write(cr,uid,ids,{'state':'confirm'})
			return True
			
	def approve_order(self, cr, uid, ids,context=None):

		self.write(cr,uid,ids,{'state':'done'})
		obj = self.browse(cr,uid,ids[0])
		product_obj = self.pool.get('product.product')
		cr.execute(""" select serindent_line_id from kg_serindent_so_line where so_id = %s """ %(str(ids[0])))
		data = cr.dictfetchall()
		val = [d['serindent_line_id'] for d in data if 'serindent_line_id' in d] # Get a values form list of dict if the dict have with empty values
		so_lines = obj.service_order_line
		if not so_lines:
			raise osv.except_osv(
					_('Empty Service Order'),
					_('System not allow to approve without Service Order Line'))
		else:
					
			for i in range(len(so_lines)):
				product_id = so_lines[i].product_id.id
				product_record = product_obj.browse(cr, uid, product_id)
				product = so_lines[i].product_id.name
				if so_lines[i].soindent_line_id:
					soindent_line_id=so_lines[i].soindent_line_id
					orig_soindent_qty = so_lines[i].soindent_qty
					so_used_qty = so_lines[i].product_qty
					pending_soindent_qty = orig_soindent_qty -  so_used_qty
					print "pending_soindent_qty::::::::::::", pending_soindent_qty
					sql = """ update kg_service_indent_line set pending_qty=%s where id = %s """%(pending_soindent_qty,
												soindent_line_id.id)
					cr.execute(sql)
					#indent_line_obj.write(cr,uid,depindent_line_id.id, {'line_state' : 'noprocess'})
				else:
					raise osv.except_osv(
						_('Direct Service Order Not Allow'),
						_('System not allow to raise a Service Order with out Service Indent for %s' %(product)))
				
			return True
			cr.close()

		
	def done_order(self, cr, uid, ids,context=None):
		"""
		order Done
		"""
		self.write(cr,uid,ids,{'state':'done'})
		return True
		
	def cancel_order(self, cr, uid, ids, context=None):
		"""
		Cancel order
		"""
		
		self.write(cr, uid,ids,{'state' : 'cancel'})
		return True

	def create(self, cr, uid, vals, context=None):
		
		if vals.has_key('user_id') and vals['user_id']:
			user_dep_name = self.pool.get('res.users').browse(cr,uid,vals['user_id'])
			if user_dep_name.dep_name:
				vals.update({'dep_name':user_dep_name.dep_name.id})
		order =  super(kg_service_order, self).create(cr, uid, vals, context=context)
		return order
		"""		
		if vals.get('name','/')=='/':
			vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'kg.service.order') or '/'
		order =  super(kg_service_order, self).create(cr, uid, vals, context=context)
		return order
		"""
	def write(self, cr, uid,ids, vals, context=None):
	
		if vals.has_key('user_id') and vals['user_id']:
			user_dep_name = self.pool.get('res.users').browse(cr,uid,vals['user_id'])
			if user_dep_name.dep_name:
				vals.update({'dep_name':user_dep_name.dep_name.id})
						 
		res = super(kg_service_order, self).write(cr, uid, ids,vals, context)
		
		return res
		
	def unlink(self, cr, uid, ids, context=None):
		if context is None:
			context = {}
		indent = self.read(cr, uid, ids, ['state'], context=context)
		unlink_ids = []
		for t in indent:
			if t['state'] in ('draft'):
				unlink_ids.append(t['id'])
			else:
				raise osv.except_osv(_('Invalid action !'), _('System not allow to delete a UN-DRAFT state Service Order !!'))
		indent_lines_to_del = self.pool.get('kg.service.order.line').search(cr, uid, [('service_id','in',unlink_ids)])
		self.pool.get('kg.service.order.line').unlink(cr, uid, indent_lines_to_del)
		osv.osv.unlink(self, cr, uid, unlink_ids, context=context)
		return True

		
	def onchange_user_id(self, cr, uid, ids, user_id, context=None):
		value = {'dep_name': ''}
		if user_id:
			user = self.pool.get('res.users').browse(cr, uid, user_id, context=context)
			value = {'dep_name': user.dep_name.id}
		return {'value': value}
		
		
	def update_soindent(self,cr,uid,ids,context=False,):
		print "callled update_soindent from KG"

		soindent_line_obj = self.pool.get('kg.service.indent.line')
		so_line_obj = self.pool.get('kg.service.order.line')
		prod_obj = self.pool.get('product.product')
		res={}
		service_order_line = []
		res['service_order_line'] = []
		res['so_flag'] = True
		obj =  self.browse(cr,uid,ids[0])
		print "obj ================>>>>", obj
		if obj.service_order_line:
			service_order_line = map(lambda x:x.id,obj.service_order_line)
			so_line_obj.unlink(cr,uid,service_order_line)
		if obj.kg_serindent_lines:
			soindent_line_ids = map(lambda x:x.id,obj.kg_serindent_lines)
			soindent_line_browse = soindent_line_obj.browse(cr,uid,soindent_line_ids)
			soindent_line_browse = sorted(soindent_line_browse, key=lambda k: k.product_id.id)
			groups = []
			for key, group in groupby(soindent_line_browse, lambda x: x.product_id.id):
				print "1 FOR Looooooooop ==>KEY::::::;;", key,"GROUP ::::::::::::;;", group
				groups.append(map(lambda r:r,group))
			for key,group in enumerate(groups):
				print "2 FOR Looooooooop ==>KEY::::::;;", key,"GROUP ::::::::::::;;", group
				qty = sum(map(lambda x:float(x.qty),group)) #TODO: qty
				soindent_line_ids = map(lambda x:x.id,group)
				prod_browse = group[0].product_id			
				uom =False
				for ele in group:
					uom = (ele.uom.id) or False
					qty = (ele.pending_qty) or False
					soindent_id= ele.id
					break
					
				vals = {
			
				'product_id':prod_browse.id,
				'product_uom':uom,
				'product_qty':qty,
				'pending_qty':qty,
				'soindent_qty':qty,
				'soindent_line_id':soindent_id,
				
				}
				print "vals =================>> :", vals
				
				#soindent_line_obj.write(cr,uid,ele.id,{'line_state' : 'process'})
				
				if ids:
					self.write(cr,uid,ids[0],{'service_order_line':[(0,0,vals)]})
				
			if ids:
				if obj.service_order_line:
					service_order_line = map(lambda x:x.id,obj.service_order_line)
					for line_id in service_order_line:
						self.write(cr,uid,ids,{'service_order_line':[]})
		self.write(cr,uid,ids,res)
			
		return True
		
	def _check_line(self, cr, uid, ids, context=None):
		print "_check_line called <><<><><><><><><><<><><><><><><"
		for so in self.browse(cr,uid,ids):
			if so.kg_serindent_lines==[]:
				tot = 0.0
				for line in so.service_order_line:
					tot += line.product_qty
					print "tot ===============================>>>>", tot
				if tot <= 0.0:			
					return False
			return True
			
	def so_direct_print(self, cr, uid, ids, context=None):
		assert len(ids) == 1, 'This option should only be used for a single id at a time'
		wf_service = netsvc.LocalService("workflow")
		wf_service.trg_validate(uid, 'kg.service.order', ids[0], 'send_rfq', cr)
		datas = {
				 'model': 'kg.service.order',
				 'ids': ids,
				 'form': self.read(cr, uid, ids[0], context=context),
		}
		return {'type': 'ir.actions.report.xml', 'report_name': 'service.order.report', 'datas': datas, 'nodestroy': True}
		
			
	_constraints = [
	
		(_check_line,'You can not save this Service Order with out Line and Zero Qty !',['line_ids']),
	
	]
	
	## The below part for create SO bill from SO ##
	
	def get_currency_id(self, cr, uid, so):
		return False
	
	def _invoice_line_hook(self, cr, uid, sol, invoice_line_id):
		return
		
	def _invoice_hook(self, cr, uid, so, invoice_id):
		return
		
	def _get_taxes_invoice(self, cr, uid, sol, type):
		
		if type in ('in_invoice', 'in_refund'):
			taxes = sol.taxes_id
		else:
			taxes = False

		if sol.service_id and sol.service_id.partner_id and sol.service_id.partner_id.id:
			return self.pool.get('account.fiscal.position').map_tax(
				cr,
				uid,
				sol.service_id.partner_id.property_account_position,
				taxes
			)
		else:
			return map(lambda x: x.id, taxes)
	
	def action_invoice_create(self, cr, uid, ids, journal_id=False,
			type='in_invoice', context=None):
				
		print "action_invoice_create =============================FROM KGGGGG>>>"
		
		if context is None:
			context = {}

		invoice_obj = self.pool.get('account.invoice')
		invoice_line_obj = self.pool.get('account.invoice.line')
		partner_obj = self.pool.get('res.partner')
		so_obj = self.pool.get('kg.service.order')
		sol_obj = self.pool.get('kg.service.order.line')
		
		res = {}
		inv_type = type
		for so in self.browse(cr, uid, ids, context=context):
			print "so---so---so ------------------>>>>>", so, so.so_bill				
			if so.so_bill == False:							
				so.write({'so_bill': True})	
				partner = so.partner_id.id				
				if not partner:
					raise osv.except_osv(_('Error, no partner!'),
						_('Please put a partner on the picking list if you want to generate invoice.'))

				if not inv_type:
					inv_type = 'in_invoice'				
				invoice_vals = self._prepare_invoice(cr, uid, so, partner, inv_type, journal_id, context=context)
				print "invoice_vals :::::::::::::--------->>", invoice_vals
				invoice_id = invoice_obj.create(cr, uid, invoice_vals, context=context)
				print "invoice_id :::::::::::::--------->>", invoice_id
				#invoices_group[partner.id] = invoice_id
				res[so.id] = invoice_id
				for sol in so.service_order_line:				
					vals = self._prepare_invoice_line(cr, uid, so, sol,
									invoice_id, invoice_vals, context=context)
					if vals:
						invoice_line_id = invoice_line_obj.create(cr, uid, vals, context=context)
						self._invoice_line_hook(cr, uid, sol, invoice_line_id)
					
				invoice_obj.button_compute(cr, uid, [invoice_id], context=context,
						set_total=(inv_type in ('in_invoice', 'in_refund')))
				self.write(cr, uid, [so.id], {
					'so_bill': True,
					}, context=context)
				self._invoice_hook(cr, uid, so, invoice_id)
			else:
				raise osv.except_osv(
					_('SO Bill Created Already !!'), 
					_('System not allow to create again !!'))
			
			return res
	
	def _prepare_invoice(self, cr, uid, so, partner, inv_type, journal_id, context=None):
		print "_prepare_invoice called from PICKING^^^^^^^^^^^^^^^^^^^^FROM KGGG"		
		val1 = so.value1 or 0.0
		val2 = so.value2 or 0.0
		other_ch1 = so.po_expenses_type1 or False
		other_ch2 = so.po_expenses_type2 or False
					
		if isinstance(partner, int):
			partner = self.pool.get('res.partner').browse(cr, uid, partner, context=context)
		
		account_id = partner.property_account_payable.id
		payment_term = partner.property_supplier_payment_term.id or False
		#comment = self._get_comment_invoice(cr, uid, picking)
		invoice_vals = {
		
			'name': self.pool.get('ir.sequence').get(cr, uid, 'account.invoice'),
			'origin': so.name,
			'type': inv_type,
			'account_id': account_id,
			'partner_id': partner.id,
			'payment_term': payment_term,
			'fiscal_position': partner.property_account_position.id,
			'date_invoice': context.get('date_inv', False),
			'user_id': uid,
			'po_expenses_type1':other_ch1,
			'po_expenses_type2':other_ch2,
			'value1':val1,
			'value2':val2,
			'state':'proforma',
			'supplier_invoice_number': context.get('sup_inv_no', False),
			'sup_inv_date': context.get('sup_inv_date', False),
			
		}
		cur_id = self.get_currency_id(cr, uid, so)
		if cur_id:
			invoice_vals['currency_id'] = cur_id
		if journal_id:
			invoice_vals['journal_id'] = journal_id
		return invoice_vals

	def _prepare_invoice_line(self, cr, uid, so, sol, invoice_id,
		invoice_vals, context=None):
		print "_prepare_invoice_line called from PICKING^^^^^^^^^^^^^^^^^^^^FROM KGGG"
		name = sol.service_id.name
		origin = sol.service_id.name or ''
		account_id = sol.product_id.property_account_expense.id
		if not account_id:
			account_id = sol.product_id.categ_id.\
					property_account_expense_categ.id		
		return {
			'name': name,
			'origin': origin,
			'invoice_id': invoice_id,
			'uos_id': sol.product_uom.id,
			'product_id': sol.product_id.id,
			'account_id': account_id,
			'price_unit': sol.price_unit,
			'discount': sol.kg_disc_amt_per,
			'quantity': sol.product_qty,
			'invoice_line_tax_id': [(6, 0, self._get_taxes_invoice(cr, uid, sol, invoice_vals['type']))],
			#'account_analytic_id': self._get_account_analytic_invoice(cr, uid, so, sol),
			'discount':sol.kg_discount_per,
			'kg_disc_amt':sol.kg_discount,
		}

kg_service_order()

class kg_service_order_line(osv.osv):
	
	_name = "kg.service.order.line"
	_description = "Service Order"
	
	def onchange_discount_value_calc(self, cr, uid, ids, kg_discount_per, product_qty, price_unit):
		discount_value = (product_qty * price_unit) * kg_discount_per / 100
		print "discount_value ---------------------", discount_value
		return {'value': {'kg_discount_per_value': discount_value}}

	def onchange_product_id(self, cr, uid, ids, product_id, product_uom,context=None):
			
		value = {'product_uom': ''}
		if product_id:
			prod = self.pool.get('product.product').browse(cr, uid, product_id, context=context)
			value = {'product_uom': prod.uom_id.id}
		return {'value': value}
		
	def onchange_qty(self,cr,uid,ids,product_qty,soindent_qty,pending_qty,context=None):
		value = {'pending_qty' : ''}
		if product_qty and product_qty > soindent_qty:
			raise osv.except_osv(
				_('If Service Order From Service Indent !'),
				_('Service Order Qty can not greater than Service Indent Qty !!'))
			value = {'pending_qty' : 0.0}
		else:
			pending_qty = product_qty
			value = {'pending_qty' : pending_qty}
		return {'value' : value}
	
		
	def _amount_line(self, cr, uid, ids, prop, arg, context=None):
		cur_obj=self.pool.get('res.currency')
		tax_obj = self.pool.get('account.tax')
		res = {}
		if context is None:
			context = {}
		for line in self.browse(cr, uid, ids, context=context):
			amt_to_per = (line.kg_discount / (line.product_qty * line.price_unit or 1.0 )) * 100
			kg_discount_per = line.kg_discount_per
			tot_discount_per = amt_to_per + kg_discount_per
			price = line.price_unit * (1 - (tot_discount_per or 0.0) / 100.0)
			taxes = tax_obj.compute_all(cr, uid, line.taxes_id, price, line.product_qty, line.product_id, line.service_id.partner_id)
			cur = line.service_id.pricelist_id.currency_id
			res[line.id] = cur_obj.round(cr, uid, cur, taxes['total'])
		return res
	
	
	
	_columns = {

	'service_id': fields.many2one('kg.service.order', 'Service.order.NO', required=True, ondelete='cascade'),
	'price_subtotal': fields.function(_amount_line, string='Linetotal', digits_compute= dp.get_precision('Account')),
	'product_id': fields.many2one('product.product', 'Product', readonly=True, domain=[('type','=','service')]),
	'product_uom': fields.many2one('product.uom', 'UOM', readonly=True),
	'product_qty': fields.float('Quantity', readonly=True),
	'soindent_qty':fields.float('SOIndent Qty'),
	'pending_qty':fields.float('Pending Qty'),
	'taxes_id': fields.many2many('account.tax', 'service_order_tax', 'tax_id','service_order_line_id', 'Taxes'),
	'soindent_line_id':fields.many2one('kg.service.indent.line', 'Indent Line'),
	'kg_discount': fields.float('Discount Amount', digits_compute= dp.get_precision('Discount')),
	'kg_disc_amt_per': fields.float('Disc Amt(%)', digits_compute= dp.get_precision('Discount')),
	'price_unit': fields.float('Unit Price', digits_compute= dp.get_precision('Product Price')),
	'kg_discount_per': fields.float('Discount (%)', digits_compute= dp.get_precision('Discount')),
	'kg_discount_per_value': fields.float('Discount(%)Value', digits_compute= dp.get_precision('Discount')),
	'note': fields.text('Remarks'),
	
	
	}
	
	def onchange_disc_amt(self, cr, uid, ids, kg_discount,product_qty,price_unit,kg_disc_amt_per):
		print "idssssssssssssssssss", ids
		if kg_discount:
			print "kg_discount..........", 
			kg_discount = kg_discount + 0.00
			amt_to_per = (kg_discount / (product_qty * price_unit or 1.0 )) * 100
			print "amt_to_peramt_to_peramt_to_per", amt_to_per
			return {'value': {'kg_disc_amt_per': amt_to_per}}
		else:
			return {'value': {'kg_disc_amt_per': 0.0}}
		
	
kg_service_order_line()	
